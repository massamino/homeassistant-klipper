# https://github.com/denkyem/home-assistant-moonraker/blob/main/moonraker.yaml
# https://github.com/thehiddentruth/home-assistant-moonraker/blob/main/moonraker.yaml

# Get current job data
rest:
  scan_interval: 5
  resource_template: "http://<moonraker-ip>:7125/server/files/metadata?filename={{ states(('sensor.3d_printer_current_print')) }}"
  sensor:
    - name: printer_3d_file_metadata
      json_attributes_path: "$.result"
      json_attributes:
        - layer_height
        - object_height
        - thumbnails
      value_template: "OK"

# Get thumbnail from server (works with subdirectories)
camera:
  - platform: generic
    name: 3d_printer_thumbernail
    still_image_url: http://<moonraker-ip>/server/files/gcodes/{{ states(('sensor.3d_printer_current_print')) | regex_findall_index('(.*/)*') }}{{ states('sensor.3d_printer_object_thumbnails') }}
    verify_ssl: false

# Actions
rest_command:
  3d_printer_emergency_stop:
    url: "http://<moonraker-ip>:7125/printer/emergency_stop"
    method: post
  3d_printer_firmware_restart:
    url: "http://<moonraker-ip>:7125/printer/firmware_restart"
    method: post
  3d_printer_cancel:
    url: "http://<moonraker-ip>:7125/printer/print/cancel"
    method: post
  3d_printer_pause:
    url: "http://<moonraker-ip>:7125/printer/print/pause"
    method: post
  3d_printer_resume:
    url: "http://<moonraker-ip>:7125/printer/print/resume"
    method: post

sensor:
  # Basic printer sensor info
  - platform: rest
    name: printer_3d_sensor
    resource: "http://<moonraker-ip>:7125/printer/objects/query?heater_bed&extruder&print_stats&toolhead&display_status&virtual_sdcard&gcode_move&filament_switch_sensor Filament"
    json_attributes_path: "$.result.status"
    json_attributes:
      - heater_bed
      - extruder
      - print_stats
      - toolhead
      - display_status
      - virtual_sdcard
      - gcode_move
      - "filament_switch_sensor Filament"
    value_template: >-
      {{ 'OK' if ('result' in value_json) else None }}
    force_update: true
    scan_interval: 1
    #  Adding an API key is only necessary while using the [authorization] component
    #  and if Home Assistant is not a trusted client
    #headers:
    #  x-api-key: 123456789abcdefghijklmno

  # Basic printer info
  - platform: rest
    name: printer_3d_info
    scan_interval: 1
    resource_template: http://<moonraker-ip>:7125/printer/info
    json_attributes_path: "$.result"
    json_attributes:
      - state_message
      - state
      - software_version
      - hostname
      - cpu_info
    value_template: >-
      {{ 'OK' if ('result' in value_json) else None }}

  # Build sensors for requested data
  - platform: template
    sensors:
      3d_printer_hotend_target:
        friendly_name: "Hotend Target"
        value_template: '{{ states.sensor.printer_3d_sensor.attributes["extruder"]["target"] | float | round(1) }}'
        device_class: temperature
        unit_of_measurement: "째C"
        icon_template: mdi:thermometer
      3d_printer_hotend_actual:
        friendly_name: "Hotend Actual"
        value_template: '{{ states.sensor.printer_3d_sensor.attributes["extruder"]["temperature"] | float | round(1) }}'
        device_class: temperature
        unit_of_measurement: "째C"
        icon_template: mdi:thermometer
      3d_printer_hotend_power:
        friendly_name: "Hotend Power"
        value_template: '{{ ((states.sensor.printer_3d_sensor.attributes["extruder"]["power"] | float) * 100) | round(0) }}'
        device_class: temperature
        unit_of_measurement: "%"
        icon_template: mdi:flash
      3d_printer_bed_target:
        friendly_name: "Bed Target"
        value_template: '{{ states.sensor.printer_3d_sensor.attributes["heater_bed"]["target"] | float | round(1) }}'
        device_class: temperature
        unit_of_measurement: "째C"
        icon_template: mdi:thermometer
      3d_printer_bed_actual:
        friendly_name: "Bed Actual"
        value_template: '{{ states.sensor.printer_3d_sensor.attributes["heater_bed"]["temperature"] | float | round(1) }}'
        device_class: temperature
        unit_of_measurement: "째C"
        icon_template: mdi:thermometer
      3d_printer_bed_power:
        friendly_name: "Bed Power"
        value_template: '{{ ((states.sensor.printer_3d_sensor.attributes["heater_bed"]["power"] | float) * 100) | round(0) }}'
        device_class: temperature
        unit_of_measurement: "%"
        icon_template: mdi:flash
      3d_printer_state:
        friendly_name: "Printer State"
        value_template: '{{ states.sensor.printer_3d_sensor.attributes["print_stats"]["state"] }}'
        icon_template: >-
          {% set val =  states.sensor.printer_3d_sensor.attributes["print_stats"]["state"]  %}
          {% if val == 'standby' %}
            mdi:sleep
          {% elif val == 'error' %}
            mdi:alert-circle
          {% elif val == 'printing' %}
            mdi:printer-3d-nozzle
          {% elif val == 'paused' %}
            mdi:pause-circle
          {% elif val == 'complete' %}
            mdi:printer-3d
          {% else %}
            mdi:help-circle
          {% endif %}
      3d_printer_current_print:
        friendly_name: "Current Print"
        value_template: '{{ states.sensor.printer_3d_sensor.attributes["print_stats"]["filename"]}}'
      3d_printer_current_progress:
        friendly_name: "Progress"
        value_template: '{{ ((states.sensor.printer_3d_sensor.attributes["display_status"]["progress"])*100) | round(0, "floor") }}'
        unit_of_measurement: "%"
        icon_template: mdi:progress-clock
      3d_printer_print_time:
        friendly_name: "Time Elapsed"
        value_template: '{{ states.sensor.printer_3d_sensor.attributes["print_stats"]["print_duration"] |timestamp_custom("%H:%M:%S", 0)}}'
        icon_template: mdi:camera-timer
      3d_printer_time_remaining:
        friendly_name: "Time Remaining"
        value_template: '{{ (((states.sensor.printer_3d_sensor.attributes["print_stats"]["print_duration"]/states.sensor.printer_3d_sensor.attributes["display_status"]["progress"]- states.sensor.printer_3d_sensor.attributes["print_stats"]["print_duration"]) if states.sensor.printer_3d_sensor.attributes["display_status"]["progress"]>0 else 0)) | timestamp_custom("%H:%M:%S", 0)}}'
        icon_template: mdi:timer-sand
      3d_printer_eta:
        friendly_name: "ETA"
        value_template:
          '{%- if states.sensor.printer_3d_sensor.attributes["display_status"]["progress"] > 0 and states.sensor.printer_3d_sensor.attributes["display_status"]["progress"] < 1 -%}
          {{ (as_timestamp(now())+1*60*60+ ((states.sensor.printer_3d_sensor.attributes["print_stats"]["print_duration"]/states.sensor.printer_3d_sensor.attributes["display_status"]["progress"]-states.sensor.printer_3d_sensor.attributes["print_stats"]["print_duration"]))) | timestamp_custom("%H:%M:%S", 0)}}
          {%- else -%}
          {{ 0 | timestamp_custom("%H:%M:%S", 0) }}
          {%- endif -%}'
        icon_template: mdi:av-timer
      3d_printer_message:
        friendly_name: "Message"
        value_template: '{{ states.sensor.printer_3d_sensor.attributes["display_status"]["message"]}}'
      3d_printer_layer_height:
        friendly_name: "Layer Height"
        value_template: '{{ states.sensor.printer_3d_file_metadata.attributes["layer_height"] | float }}'
        unit_of_measurement: "mm"
        icon_template: mdi:arrow-collapse-down
      3d_printer_object_height:
        friendly_name: "Object Height"
        value_template: '{{ (states.sensor.printer_3d_file_metadata.attributes["object_height"] | float) - (states.sensor.printer_3d_file_metadata.attributes["layer_height"] | float) }}'
        unit_of_measurement: "mm"
        icon_template: mdi:arrow-expand-vertical
      3d_printer_current_height:
        friendly_name: "Current Height"
        value_template: '{{ states.sensor.printer_3d_sensor.attributes["gcode_move"]["gcode_position"][2]  | float | round(2) }}'
        unit_of_measurement: "mm"
        icon_template: mdi:arrow-collapse-down
      3d_printer_current_layer:
        friendly_name: "Current Layer"
        value_template: '{{ (states("sensor.3d_printer_current_height")|float / states("sensor.3d_printer_layer_height")|float)|round(0) }}'
      3d_printer_total_layers:
        friendly_name: "Total Layers"
        value_template: '{{ (states("sensor.3d_printer_object_height")|float / states("sensor.3d_printer_layer_height")|float)|round(0) }}'
      3d_printer_object_thumbnails:
        friendly_name: "Object Thumbnails"
        # Get largest thumbnail
        value_template: >-
          {%- set thumbs = states.sensor.printer_3d_file_metadata.attributes["thumbnails"] -%}
          {%- set ns = namespace(heighest = thumbs[0]) -%}
          {%- for t in thumbs -%}
            {%- if t.width > ns.heighest.width -%}
              {% set ns.heighest = t %}
            {%- endif -%}
          {%- endfor -%}{{ ns.heighest["relative_path"] }}
        icon_template: mdi:image
      3d_printer_state_message:
        friendly_name: "State Message"
        value_template: '{{ states.sensor.printer_3d_info.attributes["state_message"] }}'
      3d_printer_heaters_power:
        friendly_name: "Bed and Nozzle Power"
        value_template: '{{ states("sensor.3d_printer_bed_power") }}% / {{ states("sensor.3d_printer_hotend_power") }}%'

binary_sensor:
  - platform: template
    sensors:
      3d_printer_filament:
        friendly_name: "Filament Detected"
        icon_template: mdi:printer-3d-nozzle-alert
        device_class: motion
        value_template: >-
          {{ states.sensor.printer_3d_sensor.attributes["filament_switch_sensor Filament"]["filament_detected"] }}
